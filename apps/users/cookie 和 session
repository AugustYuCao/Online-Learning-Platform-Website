1. 每个请求再headers或者url的参数中加上username，来辨认发起请求的用户，这样做有一些问题：
    安全性：容易被冒充
2. 每个请求再headers或者url的参数中加上username和password，来辨认发起请求的用户，这样做有一些问题：
    安全性：被拦截后password泄漏
3. 所以，我们采用的方法：给用户一串随机字符串（令牌），session，字符串需要满足：
    a.够随机
    b.该字符串是由服务器生成且保存的
    c.这个字符串需要和用户对应起来


1. 登陆的过程（Django）
    a. 查询用户
    b. login的逻辑
        1.先将用户的基本信息组成json，然后加密生成加密的session字符串(session_data)，可反解
        2.随机生成一串长的字符，叫做sessionid，相当于key，用来找到session
        3.将session和sessionid值绑定在一起保存到数据库中
        4.将sessionid写入到cookie当中
        5.返回请求给浏览器

2.浏览器
    a.拿到文本发现里面在cookie中写入了sessionid
    b.将cookie中的所有值（key: value）形式，写入到本地存储（文件）
    c.后续的针对该网站的所有请求都会使用cookie

3.Django如何确定某个请求是否登陆？
    a.拦截器拦截所有请求
    b.在拦截器中发现了在cookie中的sessionid后， 通过该sessionid查询到session，从session中解析出用户的id，通过id查询到用户
    c.对每个request都设置一个属性user


session在服务器端，cookie在客户端（浏览器）
浏览器从cookie中提取sessionid


#为什么使用云服务器
#1.本地的IP是一个动态分配的IP地址
#2.数据包转发问题